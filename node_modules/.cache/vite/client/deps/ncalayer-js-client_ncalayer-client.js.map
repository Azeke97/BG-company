{
  "version": 3,
  "sources": ["browser-external:ws", "../../../../ncalayer-js-client/ncalayer-client.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"ws\" has been externalized for browser compatibility. Cannot access \"ws.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// @ts-check\n\n((exports, WebSocket, window) => { // eslint-disable-line max-classes-per-file\n  /**\n   * Класс ошибок NCALayerError.\n   */\n  class NCALayerError extends Error {\n    constructor(message, canceledByUser) {\n      super(message);\n      this.name = 'NCALayerError';\n      this.canceledByUser = canceledByUser;\n    }\n  }\n\n  /**\n   * Класс клиента NCALayer.\n   */\n  class NCALayerClient {\n    /**\n     * Конструктор.\n     *\n     * @param {String} [url = 'wss://127.0.0.1:13579'] опциональный URL для подключения к NCALayer.\n     * @param {Boolean} [allowKmdHttpApi = true] допустимо ли использовать HTTP API\n     * KAZTOKEN mobile/desktop\n     * (https://kaztoken.kz/products/kaztoken-desktop/#%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5-api-%D0%BC%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D0%BF%D0%BE%D0%B4%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D1%8F-sigex),\n     * этот API работает в поточном режиме и позволяет подписывать документы очень больших размеров.\n     * На данный момент реализована поддержка этого API только в функции `basicsSignCMS`.\n     */\n    constructor(url = 'wss://127.0.0.1:13579', allowKmdHttpApi = true) {\n      this.url = url;\n      this.wsConnection = null;\n      this.responseProcessed = false;\n      this.isKmd = false; // Работаем с KAZTOKEN mobile/desktop?\n      this.allowKmdHttpApi = allowKmdHttpApi;\n      this.kmdHttpApiUrl = 'https://127.0.0.1:24680/';\n      this.isKmdHttpApiAvailable = false; // Доступен ли HTTP API KAZTOKEN mobile/desktop?\n      this.KmdHTTPAPIOperationId = null;\n      this.KmdHTTPAPIOperationInBase64 = false;\n      this.KmdHTTPAPIOperationTotal = 0;\n      this.KmdHTTPAPIOperationProcessed = 0;\n      this.basicsLogo = '';\n\n      // Используются для упрощения тестирования\n      this.onRequestReady = null;\n      this.onResponseReady = null;\n    }\n\n    /**\n     * Подключиться к NCALayer.\n     *\n     * @returns {Promise<String>} версию NCALayer.\n     *\n     * @throws NCALayerError\n     */\n    async connect() {\n      if (this.wsConnection) {\n        throw new NCALayerError('Подключение уже выполнено.');\n      }\n\n      this.wsConnection = new WebSocket(this.url);\n\n      return new Promise((resolve, reject) => {\n        this.responseProcessed = false;\n        this.setHandlers(resolve, reject);\n\n        this.wsConnection.onmessage = async (msg) => {\n          if (this.responseProcessed) {\n            return;\n          }\n          this.responseProcessed = true;\n\n          if (this.onResponseReady) {\n            this.onResponseReady(msg.data);\n          }\n\n          const response = JSON.parse(msg.data);\n\n          if (!response.result || !response.result.version) {\n            reject(new NCALayerError('Ошибка взаимодействия с NCALayer.'));\n            return;\n          }\n\n          // Идентификация KAZTOKEN mobile/desktop\n          try {\n            const request = {\n              module: 'kz.digiflow.mobile.extensions',\n              method: 'getVersion',\n            };\n\n            this.sendRequest(request);\n\n            await new Promise((resolveInner, rejectInner) => {\n              this.setHandlers(resolveInner, rejectInner);\n            });\n            this.isKmd = true;\n          } catch (err) {\n            /* игнорируем */\n          }\n\n          // Идентификация KAZTOKEN mobile/desktop HTTP API\n          (async () => {\n            try {\n              const httpResponse = await fetch(\n                this.kmdHttpApiUrl,\n                { signal: AbortSignal.timeout(1000) },\n              );\n\n              if (httpResponse.ok) {\n                this.isKmdHttpApiAvailable = true;\n              }\n            } catch (err) {\n              /* игнорируем */\n            }\n          })();\n\n          resolve(response.result.version);\n        };\n      });\n    }\n\n    /**\n     * Доступна ли функия мультиподписания (подписание нескольких документов одной операцией).\n     */\n    get multisignAvailable() { // eslint-disable-line class-methods-use-this\n      // eslint отключен для обеспечения обратной совместимости,\n      // так как раньше этот метод использовал `this`.\n      return true;\n    }\n\n    //\n    // Типы хранилищ\n    //\n\n    /**\n     * KAZTOKEN\n     */\n    static get basicsStorageKAZTOKEN() {\n      return ['AKKaztokenStore'];\n    }\n\n    /**\n     * Удостоверение личности\n     */\n    static get basicsStorageIDCard() {\n      return ['AKKZIDCardStore'];\n    }\n\n    /**\n     * eToken 72k\n     */\n    static get basicsStorageEToken72k() {\n      return ['AKEToken72KStore'];\n    }\n\n    /**\n     * eToken 5110\n     */\n    static get basicsStorageEToken5110() {\n      return ['AKEToken5110Store'];\n    }\n\n    /**\n     * JaCarta\n     */\n    static get basicsStorageJaCarta() {\n      return ['AKJaCartaStore'];\n    }\n\n    /**\n     * aKey\n     */\n    static get basicsStorageAKey() {\n      return ['AKAKEYStore'];\n    }\n\n    /**\n     * Файловле хранилище PKCS#12\n     */\n    static get basicsStoragePKCS12() {\n      return ['PKCS12'];\n    }\n\n    /**\n     * Файловле хранилище JKS\n     */\n    static get basicsStorageJKS() {\n      return ['JKS'];\n    }\n\n    /**\n     * Любые хранилища.\n     */\n    static get basicsStorageAll() {\n      return null;\n    }\n\n    /**\n     * Только аппаратные хранилища.\n     */\n    static get basicsStorageHardware() {\n      return [\n        'AKKaztokenStore',\n        'AKKZIDCardStore',\n        'AKEToken72KStore',\n        'AKEToken5110Store',\n        'AKAKEYStore',\n      ];\n    }\n\n    //\n    // Параметры подписания\n    //\n\n    /**\n     * Параметры подписания для формирования CMS по умолчанию.\n     */\n    static get basicsCMSParams() {\n      return {};\n    }\n\n    /**\n     * Параметры подписания для формирования CMS без вложенных данных из данных в Base64.\n     */\n    static get basicsCMSParamsDetached() {\n      return {\n        decode: true,\n        encapsulate: false,\n        digested: false,\n        tsaProfile: {},\n      };\n    }\n\n    /**\n     * Параметры подписания для формирования CMS без вложенных данных из данных в Base64.\n     * Без метки времени.\n     */\n    static get basicsCMSParamsDetachedNoTSP() {\n      return {\n        decode: true,\n        encapsulate: false,\n        digested: false,\n      };\n    }\n\n    /**\n     * Параметры подписания для формирования CMS без вложенных данных из хеша данных в Base64.\n     */\n    static get basicsCMSParamsDetachedHash() {\n      return {\n        decode: true,\n        encapsulate: false,\n        digested: true,\n        tsaProfile: {},\n      };\n    }\n\n    /**\n     * Параметры подписания для формирования CMS с вложенными данными из данных в Base64.\n     */\n    static get basicsCMSParamsAttached() {\n      return {\n        decode: true,\n        encapsulate: true,\n        digested: false,\n        tsaProfile: {},\n      };\n    }\n\n    /**\n     * Параметры подписания для формирования XML по умолчанию.\n     */\n    static get basicsXMLParams() {\n      return {};\n    }\n\n    //\n    // Параметры выбора сертификата\n    //\n\n    /**\n     * Любой сертификат выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerAny() {\n      return {\n        extKeyUsageOids: [],\n      };\n    }\n\n    /**\n     * Любой сертификат для подписания выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerSignAny() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.4'],\n      };\n    }\n\n    /**\n     * Сертификат физического лица для подписания выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerSignPerson() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.4', '1.2.398.3.3.4.1.1'],\n      };\n    }\n\n    /**\n     * Сертификат любого сотрудника юридического лица для подписания выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerSignOrg() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.4', '1.2.398.3.3.4.1.2'],\n      };\n    }\n\n    /**\n     * Сертификат руководителя юридического лица для подписания выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerSignHead() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.4', '1.2.398.3.3.4.1.2.1'],\n      };\n    }\n\n    /**\n     * Сертификат лица с правом подписи юридического лица для подписания выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerSignTrusted() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.4', '1.2.398.3.3.4.1.2.2'],\n      };\n    }\n\n    /**\n     * Сертификат сотрудника юридического лица для подписания выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerSignEmployee() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.4', '1.2.398.3.3.4.1.2.5'],\n      };\n    }\n\n    /**\n     * Любой сертификат для аутентификации выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerAuthAny() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.2'],\n      };\n    }\n\n    /**\n     * Сертификат физического лица для аутентификации выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerAuthPerson() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.2', '1.2.398.3.3.4.1.1'],\n      };\n    }\n\n    /**\n     * Сертификат любого сотрудника юридического лица для аутентификации выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerAuthOrg() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.2', '1.2.398.3.3.4.1.2'],\n      };\n    }\n\n    /**\n     * Сертификат руководителя юридического лица для аутентификации выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerAuthHead() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.2', '1.2.398.3.3.4.1.2.1'],\n      };\n    }\n\n    /**\n     * Сертификат лица с правом подписи юридического лица для аутентификации выпущенный боевым УЦ\n     * НУЦ.\n     */\n    static get basicsSignerAuthRight() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.2', '1.2.398.3.3.4.1.2.2'],\n      };\n    }\n\n    /**\n     * Сертификат сотрудника юридического лица для аутентификации выпущенный боевым УЦ НУЦ.\n     */\n    static get basicsSignerAuthEmployee() {\n      return {\n        extKeyUsageOids: ['1.3.6.1.5.5.7.3.2', '1.2.398.3.3.4.1.2.5'],\n      };\n    }\n\n    /**\n     * Любой сертификат выпущенный боевым или тестовым УЦ НУЦ.\n     */\n    static get basicsSignerTestAny() {\n      return {\n        extKeyUsageOids: [],\n        chain: [],\n      };\n    }\n\n    /**\n     * Настроить логотип который будет отображаться окном приложения NCALayer.\n     *\n     * @param {String | ArrayBuffer | Blob | File} logo логотип для отображения NCALayer\n     * в виде строки Base64, либо ArrayBuffer, Blob или File.\n     */\n    async setLogoForBasicsSign(logo) {\n      this.basicsLogo = await NCALayerClient.normalizeDataToSign(logo);\n    }\n\n    /**\n     * Вычислить подпись под данными с указанными параметрами. **Новая функция sign 2022 года из\n     * модуля kz.gov.pki.knca.basics (https://github.com/pkigovkz/sdkinfo/wiki/KNCA-Basics-Module)**.\n     * Сигнатура функции сложная, поэтому рекомендуем пользоваться функциями помощниками\n     * basicsSignXLM и basicsSignCMS.\n     *\n     * @param {Array | null} allowedStorages массив строк с константами допустимых для использования\n     * типов хранилищ (см. константы basicsStorage*).\n     *\n     * @param {String} format тип вычисляемой подписи: 'xml', либо 'cms'.\n     *\n     * @param {String | Array} data подписываемые данные.\n     *\n     * @param {Object} signingParams параметры подписания (см. basicsCMSParams* и basicsXMLParams*).\n     *\n     * @param {Object} signerParams параметры выбора сертификата для подписания (см. константы\n     * basicsSigner*).\n     *\n     * @param {String} locale язык пользовательского интерфейса.\n     *\n     * @param {Boolean} forceSingleSignature возвращать только одну подпись даже если получили\n     * массив, используется для обеспечения обратной совместимости работы с CMS.\n     *\n     * @returns {Promise<String | Array<String>>} подпись или массив подписей.\n     *\n     * @throws NCALayerError\n     */\n    async basicsSign(\n      allowedStorages,\n      format,\n      data,\n      signingParams,\n      signerParams,\n      locale,\n      forceSingleSignature = false,\n    ) {\n      const request = {\n        module: 'kz.gov.pki.knca.basics',\n        method: 'sign',\n        args: {\n          allowedStorages,\n          format,\n          data,\n          signingParams,\n          signerParams,\n          locale,\n        },\n      };\n\n      if (this.basicsLogo) {\n        request.args.logo = this.basicsLogo;\n      }\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => {\n        this.setHandlers(resolve, reject, forceSingleSignature);\n      });\n    }\n\n    /**\n     * Вычислить CMS подпись под данными с указанными параметрами, это функция-помощник для\n     * упрощения работы с функцией basicsSign.\n     *\n     * В том случае, если библиотека смогла обнаружить HTTP API KAZTOKEN desktop на локальном\n     * компьютере, она будет пробовать использовать его для подписания в том случае, если это\n     * не было запрещено при вызове конструктора (параметр `allowKmdHttpApi`).\n     *\n     * @param {Array | null} allowedStorages массив строк с константами допустимых для использования\n     * типов хранилищ (см. константы basicsStorage*).\n     *\n     * @param {String | ArrayBuffer | Blob | File | Array<String | ArrayBuffer | Blob | File>} data\n     * данные, которые нужно подписать, в виде строки Base64, либо ArrayBuffer, Blob или File.\n     * Так же поддерживается массив документов.\n     *\n     * @param {Object} signingParams параметры подписания (см basicsCMSParams*).\n     *\n     * @param {Object} signerParams параметры выбора сертификата для подписания (см. константы\n     * basicsSigner*).\n     *\n     * @param {String} [locale = 'ru'] язык пользовательского интерфейса.\n     *\n     * @returns {Promise<String | Array<String>>} подпись, либо массив подписей если на подписание\n     * был передан массиов документов.\n     *\n     * @throws NCALayerError\n     */\n    async basicsSignCMS(allowedStorages, data, signingParams, signerParams, locale = 'ru') {\n      const dataIsArray = Array.isArray(data);\n\n      // Использование HTTP API KAZTOKEN mobile/desktop\n      if (this.allowKmdHttpApi && this.isKmdHttpApiAvailable) {\n        try {\n          const documents = dataIsArray ? data : [data];\n          const base64 = (typeof (documents[0]) === 'string');\n\n          let response = await fetch(\n            this.kmdHttpApiUrl,\n            {\n              method: 'POST',\n              mode: 'cors',\n              credentials: 'include',\n              body: JSON.stringify({\n                numberOfDocuments: documents.length,\n                base64,\n                encapsulateContent: signingParams.encapsulate,\n              }),\n            },\n          );\n\n          if (!response) {\n            throw new NCALayerError('Ошибка взаимодействия с KAZTOKEN mobile/desktop.');\n          }\n\n          if (!response.ok) {\n            if (response.status === 409) {\n              throw new NCALayerError('Операция отменена пользователем', true);\n            }\n            throw new NCALayerError(`KAZTOKEN mobile/desktop вернул ошибку '${response.status}: ${response.statusText}'`);\n          }\n\n          const operationId = await response.text();\n\n          const signatures = [];\n          // eslint-disable-next-line no-restricted-syntax\n          for (const document of documents) {\n            // eslint-disable-next-line no-await-in-loop\n            response = await fetch(\n              `${this.kmdHttpApiUrl}${operationId}`,\n              {\n                method: 'POST',\n                mode: 'cors',\n                credentials: 'include',\n                body: document,\n              },\n            );\n\n            if (!response) {\n              throw new NCALayerError('Ошибка взаимодействия с KAZTOKEN mobile/desktop.');\n            }\n\n            if (!response.ok) {\n              if (response.status === 401) {\n                throw new NCALayerError('Операция отменена пользователем', true);\n              }\n              throw new NCALayerError(`KAZTOKEN mobile/desktop вернул ошибку '${response.status}: ${response.statusText}'`);\n            }\n\n            let signature = '';\n            if (base64) {\n              // eslint-disable-next-line no-await-in-loop\n              signature = await response.text();\n            } else {\n              // eslint-disable-next-line no-await-in-loop\n              const signatureBytes = await response.arrayBuffer();\n              signature = NCALayerClient.arrayBufferToB64(signatureBytes);\n            }\n\n            signatures.push(signature);\n          }\n\n          return dataIsArray ? signatures : signatures[0];\n        } catch (err) {\n          throw new NCALayerError(`Ошибка взаимодействия с KAZTOKEN mobile/desktop: ${err}`);\n        }\n      }\n\n      const forceSingleSignature = !dataIsArray;\n      return this.basicsSign(\n        allowedStorages,\n        'cms',\n        await NCALayerClient.normalizeDataToSign(data),\n        signingParams,\n        signerParams,\n        locale,\n        forceSingleSignature,\n      );\n    }\n\n    /**\n     * Вычислить XML подпись под данными с указанными параметрами, это функция-помощник для\n     * упрощения работы с функцией basicsSign.\n     *\n     * @param {Array | null} allowedStorages массив строк с константами допустимых для использования\n     * типов хранилищ (см. константы basicsStorage*).\n     *\n     * @param {String | Array<String>} data подписываемые данные - строка (либо массив строк) XML.\n     *\n     * @param {Object} signingParams параметры подписания (см basicsXMLParams*).\n     *\n     * @param {Object} signerParams параметры выбора сертификата для подписания (см. константы\n     * basicsSigner*).\n     *\n     * @param {String} [locale = 'ru'] язык пользовательского интерфейса.\n     *\n     * @returns {Promise<String | Array<String>>} подпись или массив подписей.\n     *\n     * @throws NCALayerError\n     */\n    async basicsSignXML(allowedStorages, data, signingParams, signerParams, locale = 'ru') {\n      return this.basicsSign(\n        allowedStorages,\n        'xml',\n        data,\n        signingParams,\n        signerParams,\n        locale,\n      );\n    }\n\n    /**\n     * Проверить доступность функции мультиподписания через HTTP API KAZTOKEN mobile/desktop.\n     *\n     * @returns {Promise<Boolean>} доступна ли функция.\n     */\n    async kmdMultisignAvailable() {\n      try {\n        const httpResponse = await fetch(\n          this.kmdHttpApiUrl,\n          { signal: AbortSignal.timeout(1000) },\n        );\n\n        if (httpResponse.ok) {\n          return true;\n        }\n      } catch (err) {\n        /* игнорируем */\n      }\n\n      return false;\n    }\n\n    /**\n     * Инициировать процедуру мультиподписания через HTTP API KAZTOKEN mobile/desktop.\n     * Не требует предварительного вызова `connect()`.\n     *\n     * @param {Number} numberOfDocuments количество документов которые будут подписаны\n     * в рамках процедуры мультиподписания.\n     *\n     * @param {Boolean} base64 будут ли данные передаваться в base64 или в бинарном виде.\n     *\n     * @param {Boolean} encapsulateContent следудует ли встраивать подписываемые данные в подписи\n     * (не рекомендуется, так как в этом случае требуется значительно больше ОЗУ для обработки).\n     *\n     * @throws NCALayerError\n     */\n    async startKmdMultisign(numberOfDocuments, base64, encapsulateContent) {\n      let response;\n      try {\n        response = await fetch(\n          this.kmdHttpApiUrl,\n          {\n            method: 'POST',\n            mode: 'cors',\n            credentials: 'include',\n            body: JSON.stringify({\n              numberOfDocuments,\n              base64,\n              encapsulateContent,\n            }),\n          },\n        );\n      } catch (err) {\n        throw new NCALayerError(`Ошибка взаимодействия с KAZTOKEN mobile/desktop: ${err}`);\n      }\n\n      if (!response) {\n        throw new NCALayerError('Ошибка взаимодействия с KAZTOKEN mobile/desktop');\n      }\n\n      if (!response.ok) {\n        if (response.status === 409) {\n          throw new NCALayerError('Операция отменена пользователем', true);\n        }\n        throw new NCALayerError(`KAZTOKEN mobile/desktop вернул ошибку '${response.status}: ${response.statusText}'`);\n      }\n\n      try {\n        this.KmdHTTPAPIOperationId = await response.text();\n        this.KmdHTTPAPIOperationInBase64 = base64;\n        this.KmdHTTPAPIOperationTotal = numberOfDocuments;\n        this.KmdHTTPAPIOperationProcessed = 0;\n      } catch (err) {\n        throw new NCALayerError(`Ошибка взаимодействия с KAZTOKEN mobile/desktop: ${err}`);\n      }\n    }\n\n    /**\n     * Вычислить CMS подпись под данными в рамках процедуры мультиподписания через HTTP API\n     * KAZTOKEN mobile/desktop.\n     *\n     * Можно вызывать только после того как процедура была инициализирована с помощью\n     * `StartKmdMultisign` и только для того количества документов, которое было\n     * указано при инициализации.\n     *\n     * @param {String | ArrayBuffer | Blob | File} data\n     * данные, которые нужно подписать, в виде строки Base64, либо ArrayBuffer, Blob или File.\n     *\n     * @returns {Promise<String>} подпись в base64.\n     *\n     * @throws NCALayerError\n     */\n    async kmdMultisignNext(data) {\n      if (!this.KmdHTTPAPIOperationId) {\n        throw new NCALayerError('Процедура мультиподписания не была инициализирована');\n      }\n\n      let response;\n      try {\n        response = await fetch(\n          `${this.kmdHttpApiUrl}${this.KmdHTTPAPIOperationId}`,\n          {\n            method: 'POST',\n            mode: 'cors',\n            credentials: 'include',\n            body: data,\n          },\n        );\n      } catch (err) {\n        throw new NCALayerError(`Ошибка взаимодействия с KAZTOKEN mobile/desktop: ${err}`);\n      }\n\n      if (!response) {\n        throw new NCALayerError('Ошибка взаимодействия с KAZTOKEN mobile/desktop');\n      }\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new NCALayerError('Операция отменена пользователем', true);\n        }\n        throw new NCALayerError(`KAZTOKEN mobile/desktop вернул ошибку '${response.status}: ${response.statusText}'`);\n      }\n\n      let signature = '';\n      if (this.KmdHTTPAPIOperationInBase64) {\n        signature = await response.text();\n      } else {\n        const signatureBytes = await response.arrayBuffer();\n        signature = NCALayerClient.arrayBufferToB64(signatureBytes);\n      }\n\n      this.KmdHTTPAPIOperationProcessed += 1;\n      if (this.KmdHTTPAPIOperationProcessed === this.KmdHTTPAPIOperationTotal) {\n        this.KmdHTTPAPIOperationId = null;\n        this.KmdHTTPAPIOperationProcessed = 0;\n        this.KmdHTTPAPIOperationTotal = 0;\n      }\n\n      return signature;\n    }\n\n    /**\n     * Получить список активных типов устройств.\n     *\n     * @returns {Promise<String[]>} массив содержащий типы хранилищ экземпляры которых доступны в\n     * данный момент.\n     *\n     * @throws NCALayerError\n     */\n    async getActiveTokens() {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'getActiveTokens',\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Получить информацию об одной записи (ключевой паре с сертификатом).\n     *\n     * @param {String} storageType тип хранилища на экземплярах которого следует искать записи.\n     *\n     * @returns {Promise<Object>} объект с информацией о записи.\n     *\n     * @throws NCALayerError\n     */\n    async getKeyInfo(storageType) {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'getKeyInfo',\n        args: [\n          storageType,\n        ],\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Вычислить подпись под данными и сформировать CMS (CAdES).\n     *\n     * @param {String} storageType тип хранилища который следует использовать для подписания.\n     *\n     * @param {String | ArrayBuffer | Blob | File | Array<String | ArrayBuffer | Blob | File>} data\n     * данные, которые нужно подписать, в виде строки Base64, либо ArrayBuffer, Blob или File.\n     * Так же поддерживается массив строк Base64, ArrayBuffer, Blob или File, но это будет работать\n     * только с приложениями KAZTOKEN mobile/desktop, NCALayer не умеет подписывать массив\n     * документов.\n     *\n     * @param {String} [keyType = 'SIGNATURE'] каким типом ключа следует подписывать, поддерживаемые\n     * варианты 'SIGNATURE' и 'AUTHENTICATION', иное значение позволит пользователю выбрать\n     * любой доступный в хранилище ключа.\n     *\n     * @param {Boolean} [attach = false] следует ли включить в подпись подписываемые данные.\n     *\n     * @returns {Promise<String>} CMS подпись в виде Base64 строки.\n     *\n     * @throws NCALayerError\n     */\n    async createCAdESFromBase64(storageType, data, keyType = 'SIGNATURE', attach = false) {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'createCAdESFromBase64',\n        args: [\n          storageType,\n          keyType,\n          await NCALayerClient.normalizeDataToSign(data),\n          attach,\n        ],\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Вычислить подпись под хешем данных и сформировать CMS (CAdES).\n     *\n     * @param {String} storageType тип хранилища который следует использовать для подписания.\n     *\n     * @param {String | ArrayBuffer | Blob | File | Array<String | ArrayBuffer | Blob | File>} hash\n     * хеш данных в виде строки Base64, либо ArrayBuffer, Blob или File.\n     * Так же поддерживается массив строк Base64, ArrayBuffer, Blob или File, но это будет работать\n     * только с приложениями KAZTOKEN mobile/desktop, NCALayer не умеет подписывать массив\n     * хешей.\n     *\n     * @param {String} [keyType = 'SIGNATURE'] каким типом ключа следует подписывать, поддерживаемые\n     * варианты 'SIGNATURE' и 'AUTHENTICATION', иное значение позволит пользователю выбрать\n     * любой доступный в хранилище ключа.\n     *\n     * @returns {Promise<String>} CMS подпись в виде Base64 строки.\n     *\n     * @throws NCALayerError\n     */\n    async createCAdESFromBase64Hash(storageType, hash, keyType = 'SIGNATURE') {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'createCAdESFromBase64Hash',\n        args: [\n          storageType,\n          keyType,\n          await NCALayerClient.normalizeDataToSign(hash),\n        ],\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Подписать блок данных и сформировать CMS (CAdES) подпись с интегрированной меткой времени\n     * TSP. **Не рекомендуется использовать, разработчики NCALayer пометили как DEPRECATED (https://forum.pki.gov.kz/t/podpis-s-metkoj-vremeni-na-js/704/7)!**\n     *\n     * @param {String} storageType тип хранилища который следует использовать для подписания.\n     *\n     * @param {String | ArrayBuffer | Blob | File | Array<String | ArrayBuffer | Blob | File>} data\n     * данные, которые нужно подписать, в виде строки Base64, либо ArrayBuffer, Blob или File.\n     * Так же поддерживается массив строк Base64, ArrayBuffer, Blob или File, но это будет работать\n     * только с приложениями KAZTOKEN mobile/desktop, NCALayer не умеет подписывать массив\n     * документов.\n     *\n     * @param {String} [keyType = 'SIGNATURE'] каким типом ключа следует подписывать, поддерживаемые\n     * варианты 'SIGNATURE' и 'AUTHENTICATION', иное значение позволит пользователю выбрать\n     * любой доступный в хранилище ключа.\n     *\n     * @param {Boolean} [attach = false] следует ли включить в подпись подписываемые данные.\n     *\n     * @returns {Promise<String>} CMS подпись в виде Base64 строки.\n     *\n     * @throws NCALayerError\n     */\n    async createCMSSignatureFromBase64(storageType, data, keyType = 'SIGNATURE', attach = false) {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'createCMSSignatureFromBase64',\n        args: [\n          storageType,\n          keyType,\n          await NCALayerClient.normalizeDataToSign(data),\n          attach,\n        ],\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Вычислить подпись под документом в формате XML.\n     *\n     * @param {String} storageType тип хранилища который следует использовать для подписания.\n     *\n     * @param {String} xml XML данные которые нужно подписать.\n     *\n     * @param {String} [keyType = 'SIGNATURE'] каким типом ключа следует подписывать, поддерживаемые\n     * варианты 'SIGNATURE' и 'AUTHENTICATION', иное значение позволит пользователю выбрать\n     * любой доступный в хранилище ключа.\n     *\n     * @param {String} [tbsElementXPath = ''] путь к подписываемому узлу XML.\n     *\n     * @param {String} [signatureParentElementXPath = ''] путь к узлу в который необходимо добавить\n     * сформированную подпись.\n     *\n     * @returns {Promise<String>} XML документ содержащий XMLDSIG подпись.\n     *\n     * @throws NCALayerError\n     */\n    async signXml(storageType, xml, keyType = 'SIGNATURE', tbsElementXPath = '', signatureParentElementXPath = '') {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'signXml',\n        args: [\n          storageType,\n          keyType,\n          xml,\n          tbsElementXPath,\n          signatureParentElementXPath,\n        ],\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Вычислить подпись под каждым из массива документов в формате XML.\n     *\n     * @param {String} storageType тип хранилища который следует использовать для подписания.\n     *\n     * @param {String[]} xmls массив XML данных которые нужно подписать.\n     *\n     * @param {String} [keyType = 'SIGNATURE'] каким типом ключа следует подписывать, поддерживаемые\n     * варианты 'SIGNATURE' и 'AUTHENTICATION', иное значение позволит пользователю выбрать\n     * любой доступный в хранилище ключа.\n     *\n     * @param {String} [tbsElementXPath = ''] путь к подписываемому узлу XML.\n     *\n     * @param {String} [signatureParentElementXPath = ''] путь к узлу в который необходимо добавить\n     * сформированную подпись.\n     *\n     * @returns {Promise<String[]>} массив XML документов содержащих XMLDSIG подписи.\n     *\n     * @throws NCALayerError\n     */\n    async signXmls(storageType, xmls, keyType = 'SIGNATURE', tbsElementXPath = '', signatureParentElementXPath = '') {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'signXmls',\n        args: [\n          storageType,\n          keyType,\n          xmls,\n          tbsElementXPath,\n          signatureParentElementXPath,\n        ],\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Изменить язык интерфейса NCALayer.\n     *\n     * @param {String} localeId новый идентификатор языка.\n     *\n     * @throws NCALayerError\n     */\n    async changeLocale(localeId) {\n      const request = {\n        module: 'kz.gov.pki.knca.commonUtils',\n        method: 'changeLocale',\n        args: [\n          localeId,\n        ],\n      };\n\n      this.sendRequest(request);\n\n      return new Promise((resolve, reject) => { this.setHandlers(resolve, reject); });\n    }\n\n    /**\n     * Константа определяющая имя файлового хранилища.\n     */\n    static get fileStorageType() {\n      return 'PKCS12';\n    }\n\n    sendRequest(request) {\n      if (!this.wsConnection) {\n        throw new NCALayerError('Подключение к NCALayer не установлено.');\n      }\n\n      const jsonRequest = JSON.stringify(request);\n      if (this.onRequestReady) {\n        this.onRequestReady(jsonRequest);\n      }\n\n      this.wsConnection.send(jsonRequest);\n    }\n\n    setHandlers(resolve, reject, forceSingleSignature) {\n      this.responseProcessed = false;\n\n      this.wsConnection.onerror = () => {\n        if (this.responseProcessed) {\n          return;\n        }\n        this.responseProcessed = true;\n\n        reject(new NCALayerError('Ошибка взаимодействия с NCALayer. В том случае, если на вашем компьютере не установлен NCALayer, пожалуйста установите его c портала НУЦ РК (https://ncl.pki.gov.kz/). Если же NCALayer установлен, но портал выдает ошибку, свяжитесь, пожалуйста, с нашей технической поддержкой.'));\n      };\n\n      this.wsConnection.onclose = () => {\n        if (this.responseProcessed) {\n          return;\n        }\n        this.responseProcessed = true;\n\n        reject(new NCALayerError('NCALayer закрыл соединение.'));\n      };\n\n      this.wsConnection.onmessage = (msg) => {\n        if (this.responseProcessed) {\n          return;\n        }\n        this.responseProcessed = true;\n\n        if (this.onResponseReady) {\n          this.onResponseReady(msg.data);\n        }\n\n        const response = JSON.parse(msg.data);\n\n        // basics response\n        if (response.hasOwnProperty('status')) { // eslint-disable-line no-prototype-builtins\n          if (!response.status) {\n            reject(new NCALayerError(`${response.code}: ${response.message} (${response.details})`));\n            return;\n          }\n\n          if (!response.body.hasOwnProperty('result')) { // eslint-disable-line no-prototype-builtins\n            reject(new NCALayerError('cancelled by user', true));\n            return;\n          }\n\n          let { result } = response.body;\n          if (forceSingleSignature && Array.isArray(result)) {\n            [result] = result;\n          }\n          resolve(result);\n          return;\n        }\n\n        // commonUtils response\n        if (response.code !== '200') {\n          reject(new NCALayerError(`${response.code}: ${response.message}`));\n          return;\n        }\n\n        resolve(response.responseObject);\n      };\n    }\n\n    static arrayBufferToB64(arrayBuffer) {\n      let binary = '';\n      const bytes = new Uint8Array(arrayBuffer);\n      const len = bytes.byteLength;\n      for (let i = 0; i < len; i += 1) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return window.btoa(binary);\n    }\n\n    static async normalizeDataToSign(data) {\n      const normalizeDataBlock = async (dataBlock) => {\n        if (typeof dataBlock === 'string') {\n          return dataBlock;\n        }\n\n        let dataBlockArrayBuffer = dataBlock;\n        if (dataBlock instanceof Blob) {\n          dataBlockArrayBuffer = await dataBlock.arrayBuffer();\n        }\n\n        return NCALayerClient.arrayBufferToB64(dataBlockArrayBuffer);\n      };\n\n      if (Array.isArray(data)) {\n        return Promise.all(data.map(normalizeDataBlock));\n      }\n\n      return normalizeDataBlock(data);\n    }\n  }\n\n  exports.NCALayerClient = NCALayerClient; // eslint-disable-line no-param-reassign\n})(\n  typeof exports === 'undefined' ? this : exports,\n  typeof WebSocket === 'undefined' ? require('ws') : WebSocket,\n  typeof window === 'undefined' ? { btoa(x) { return x; } } : window // eslint-disable-line comma-dangle\n); // Заглушка для NodeJS\n"],
  "mappings": "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",
  "names": ["exports", "WebSocket", "window"]
}
